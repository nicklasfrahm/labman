name: api-server

on:
  push:
    branches:
      - '**'
    paths:
      - api-server/**
      - .github/workflows/api-server.yml
      - docker-compose.yml
    tags:
      - v*
  pull_request:
    branches:
      - '**'
    paths:
      - api-server/**
      - .github/workflows/api-server.yml
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

env:
  APP: api-server
  PRODUCTION_HOST: api.labman.intric.dk
  PLATFORMS: linux/amd64,linux/arm64
  GHCR_CONTAINER_IMAGE: ghcr.io/${{ github.repository }}-api-server
  DHCR_CONTAINER_IMAGE: registry.hub.docker.com/${{ github.repository }}-api-server

defaults:
  run:
    working-directory: api-server

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Configure MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: '4.4'

      - name: Configure Python
        uses: actions/setup-python@v3.1.1
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Upgrade pip.
          python -m pip install --upgrade pip

          # Install dependencies.
          pip install -r requirements.txt

      - name: Lint source files
        run: black .

      - name: Run tests
        run: pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Generate container meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v3.7.0
        with:
          images: |
            ${{ env.GHCR_CONTAINER_IMAGE }}
            ${{ env.DHCR_CONTAINER_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Log in to Docker Hub container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: registry.hub.docker.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DHCR_PAT }}

      - name: Build and push container image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.APP }}
          file: ./${{ env.APP }}/Dockerfile
          cache-from: type=registry,ref=${{ env.GHCR_CONTAINER_IMAGE }}:main
          cache-to: type=inline
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DHCR_PASSWORD }}
          repository: ${{ github.repository }}-${{ env.APP }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: production-labman-api-server
      url: https://${{ env.PRODUCTION_HOST }}/health
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Upload docker-compose.yaml
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          source: docker-compose.yml
          target: /home/${{ secrets.SSH_USER }}

      - name: Update services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          script: |
            docker-compose pull
            docker-compose up -d
            docker system prune -af
